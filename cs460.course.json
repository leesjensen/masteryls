{
  "title": "Advanced Web Framework Programming",
  "description": "This course gives an advanced survey of the common web frameworks such as React, Vue, and Svelte. We then dive into the implementation details of each framework. This includes how each framework implements DOM interactions, managing state, handling reactivity, routing, and integrating HTML, JavaScript, and CSS. The different framework approaches are compared and contrasted with discussions of performance, scalability, and developer experience. You then create your own web framework that renders components, manages state, supports reactivity, handles routing, and integrates HTML, CSS, and JavaScript. As a demonstration of your mastery you build a modern web application using your framework.",
  "modules": [
    {
      "title": "Module 1: Foundations & The Render Function",
      "description": "Explore the core theory of modern frameworks. Begin building your own framework by creating a function that can render components and handle user events.",
      "topics": [
        {
          "title": "Overview",
          "description": "Course introduction, learning objectives, and an overview of the iterative framework project.",
          "path": "README.md"
        },
        {
          "title": "The Evolution from jQuery to Components",
          "description": "A historical look at why modern frameworks were created.",
          "path": "instruction/the-evolution-from-jquery-to-components/the-evolution-from-jquery-to-components.md"
        },
        {
          "title": "Plain JavaScript DOM Manipulation",
          "description": "Revisiting `createElement`, `appendChild`, and `setAttribute` as the foundation.",
          "path": "instruction/plain-javascript-dom-manipulation/plain-javascript-dom-manipulation.md"
        },
        {
          "title": "Understanding the Component Model",
          "description": "Defining components as reusable, composable pieces of UI.",
          "path": "instruction/understanding-the-component-model/understanding-the-component-model.md"
        },
        {
          "title": "Project: Your First Render Function",
          "description": "Write a function that takes a component and mounts it to the DOM.",
          "path": "instruction/project-your-first-render-function/project-your-first-render-function.md"
        },
        {
          "title": "Introduction to JSX",
          "description": "What is JSX and why is it used? Understanding it as syntactic sugar.",
          "path": "instruction/introduction-to-jsx/introduction-to-jsx.md"
        },
        {
          "title": "Setting up a Transpiler (Babel)",
          "description": "Configure Babel to convert JSX into standard JavaScript function calls.",
          "path": "instruction/setting-up-a-transpiler-babel/setting-up-a-transpiler-babel.md"
        },
        {
          "title": "How Transpiling Works: ASTs",
          "description": "A look into Abstract Syntax Trees and the magic behind code transformation.",
          "path": "instruction/how-transpiling-works-asts/how-transpiling-works-asts.md"
        },
        {
          "title": "Project: Create a JSX `createElement` Function",
          "description": "Implement the function that Babel will call to create virtual nodes.",
          "path": "instruction/project-create-a-jsx-createelement-function/project-create-a-jsx-createelement-function.md"
        },
        {
          "title": "Handling Text Nodes in JSX",
          "description": "Differentiating between element nodes and simple text nodes during rendering.",
          "path": "instruction/handling-text-nodes-in-jsx/handling-text-nodes-in-jsx.md"
        },
        {
          "title": "Handling HTML Attributes and Props",
          "description": "Passing data and HTML attributes like 'class' and 'id' via props.",
          "path": "instruction/handling-html-attributes-and-props/handling-html-attributes-and-props.md"
        },
        {
          "title": "Handling Event Listeners",
          "description": "A strategy for attaching event listeners like `onClick` declaratively.",
          "path": "instruction/handling-event-listeners/handling-event-listeners.md"
        },
        {
          "title": "Project: Enhance Renderer for Attributes and Events",
          "description": "Upgrade your render function to handle props and events.",
          "path": "instruction/project-enhance-renderer-for-attributes-and-events/project-enhance-renderer-for-attributes-and-events.md"
        },
        {
          "title": "Nested Components (Composition)",
          "description": "The power of frameworks: building complex UIs by composing simple components.",
          "path": "instruction/nested-components-composition/nested-components-composition.md"
        },
        {
          "title": "Project: Rendering Nested Components",
          "description": "Update the renderer to handle components that render other components.",
          "path": "instruction/project-rendering-nested-components/project-rendering-nested-components.md"
        },
        {
          "title": "Module 1 Review",
          "description": "Recap of the initial framework structure and rendering logic.",
          "path": "instruction/module-1-review/module-1-review.md"
        }
      ]
    },
    {
      "title": "Module 2: The Virtual DOM & Reconciliation",
      "description": "Make your framework efficient. Learn the theory behind the Virtual DOM and implement a 'diff and patch' algorithm to minimize direct DOM manipulations.",
      "topics": [
        {
          "title": "The Need for State",
          "description": "Introducing the concept of data that changes over time within a component.",
          "path": "instruction/the-need-for-state/the-need-for-state.md"
        },
        {
          "title": "Props vs. State",
          "description": "A clear distinction between immutable props and mutable state.",
          "path": "instruction/props-vs-state/props-vs-state.md"
        },
        {
          "title": "The Performance Problem with Direct DOM Manipulation",
          "description": "Why re-rendering everything is slow and inefficient.",
          "path": "instruction/the-performance-problem-with-direct-dom-manipulation/the-performance-problem-with-direct-dom-manipulation.md"
        },
        {
          "title": "Theory of the Virtual DOM",
          "description": "Using a JavaScript object representation of the DOM to improve performance.",
          "path": "instruction/theory-of-the-virtual-dom/theory-of-the-virtual-dom.md"
        },
        {
          "title": "Project: Representing the DOM as Objects",
          "description": "Refactor your `createElement` to produce VDOM node objects.",
          "path": "instruction/project-representing-the-dom-as-objects/project-representing-the-dom-as-objects.md"
        },
        {
          "title": "The Reconciliation Algorithm",
          "description": "An overview of comparing two VDOM trees to find the differences.",
          "path": "instruction/the-reconciliation-algorithm/the-reconciliation-algorithm.md"
        },
        {
          "title": "Diffing Logic: Detecting Node Additions",
          "description": "Implementing the part of the algorithm that handles new nodes.",
          "path": "instruction/diffing-logic-detecting-node-additions/diffing-logic-detecting-node-additions.md"
        },
        {
          "title": "Diffing Logic: Detecting Node Deletions",
          "description": "Implementing the part of the algorithm that handles removed nodes.",
          "path": "instruction/diffing-logic-detecting-node-deletions/diffing-logic-detecting-node-deletions.md"
        },
        {
          "title": "Diffing Logic: Detecting Node Replacements",
          "description": "Handling cases where a node's type has changed (e.g., `div` to `p`).",
          "path": "instruction/diffing-logic-detecting-node-replacements/diffing-logic-detecting-node-replacements.md"
        },
        {
          "title": "Diffing Logic: Detecting Attribute Changes",
          "description": "Checking for updated, added, or removed props/attributes.",
          "path": "instruction/diffing-logic-detecting-attribute-changes/diffing-logic-detecting-attribute-changes.md"
        },
        {
          "title": "Project: Implementing the `diff` Function",
          "description": "Write a function that takes two VDOM trees and returns a set of 'patches'.",
          "path": "instruction/project-implementing-the-diff-function/project-implementing-the-diff-function.md"
        },
        {
          "title": "Applying Patches to the Real DOM",
          "description": "Creating a `patch` function that applies the calculated changes to the browser DOM.",
          "path": "instruction/applying-patches-to-the-real-dom/applying-patches-to-the-real-dom.md"
        },
        {
          "title": "Project: The Full Reconciliation Loop",
          "description": "Integrate the `render`, `diff`, and `patch` functions into a complete update cycle.",
          "path": "instruction/project-the-full-reconciliation-loop/project-the-full-reconciliation-loop.md"
        },
        {
          "title": "Handling Lists and the 'key' Prop",
          "description": "Why keys are crucial for efficient list reconciliation.",
          "path": "instruction/handling-lists-and-the-key-prop/handling-lists-and-the-key-prop.md"
        },
        {
          "title": "Project: Improving the Diffing Algorithm with Keys",
          "description": "Upgrade your diffing logic to use keys for more efficient list updates.",
          "path": "instruction/project-improving-the-diffing-algorithm-with-keys/project-improving-the-diffing-algorithm-with-keys.md"
        },
        {
          "title": "Module 2 Review",
          "description": "Review of the VDOM, diffing, and patching implementation.",
          "path": "instruction/module-2-review/module-2-review.md"
        }
      ]
    },
    {
      "title": "Module 3: Reactivity, State, and Lifecycle",
      "description": "Bring your framework to life. Implement a state management system that automatically triggers re-renders, and add lifecycle methods for side effects.",
      "topics": [
        {
          "title": "What is Reactivity?",
          "description": "Defining reactivity as the automatic synchronization between state and the DOM.",
          "path": "instruction/what-is-reactivity/what-is-reactivity.md"
        },
        {
          "title": "The Observer Pattern",
          "description": "A foundational software design pattern for implementing reactivity.",
          "path": "instruction/the-observer-pattern/the-observer-pattern.md"
        },
        {
          "title": "Implementing a Dependency Tracking System",
          "description": "A system to know which components to re-render when a piece of state changes.",
          "path": "instruction/implementing-a-dependency-tracking-system/implementing-a-dependency-tracking-system.md"
        },
        {
          "title": "The 'Hook' Concept",
          "description": "Understanding the concept of hooks for adding stateful logic to components.",
          "path": "instruction/the-hook-concept/the-hook-concept.md"
        },
        {
          "title": "Project: Building a `useState` Hook",
          "description": "Implement the most fundamental hook for managing component state.",
          "path": "instruction/project-building-a-usestate-hook/project-building-a-usestate-hook.md"
        },
        {
          "title": "Reactivity with Getters/Setters vs. Proxies",
          "description": "Comparing two common JavaScript techniques for trapping state changes.",
          "path": "instruction/reactivity-with-getters-setters-vs-proxies/reactivity-with-getters-setters-vs-proxies.md"
        },
        {
          "title": "Deep Dive: JavaScript `Proxy` Objects",
          "description": "A detailed look at how to use Proxies to intercept operations on objects.",
          "path": "instruction/deep-dive-javascript-proxy-objects/deep-dive-javascript-proxy-objects.md"
        },
        {
          "title": "Project: Refactoring State Management with Proxies",
          "description": "Upgrade the `useState` hook to use the more powerful Proxy-based approach.",
          "path": "instruction/project-refactoring-state-management-with-proxies/project-refactoring-state-management-with-proxies.md"
        },
        {
          "title": "Handling Side Effects",
          "description": "The need for a controlled way to interact with the outside world (e.g., APIs, timers).",
          "path": "instruction/handling-side-effects/handling-side-effects.md"
        },
        {
          "title": "Project: Building a `useEffect` Hook",
          "description": "Create a hook for performing side effects after a render.",
          "path": "instruction/project-building-a-useeffect-hook/project-building-a-useeffect-hook.md"
        },
        {
          "title": "Managing Effect Dependencies",
          "description": "Controlling when effects re-run by specifying a dependency array.",
          "path": "instruction/managing-effect-dependencies/managing-effect-dependencies.md"
        },
        {
          "title": "Handling Effect Cleanup",
          "description": "How to return a function from an effect to clean up resources.",
          "path": "instruction/handling-effect-cleanup/handling-effect-cleanup.md"
        },
        {
          "title": "Component Lifecycle: Mount, Update, Unmount",
          "description": "Relating the `useState` and `useEffect` hooks to the traditional component lifecycle.",
          "path": "instruction/component-lifecycle-mount-update-unmount/component-lifecycle-mount-update-unmount.md"
        },
        {
          "title": "Asynchronous State Updates and Batching",
          "description": "Why frameworks batch state updates and how to implement a simple update queue.",
          "path": "instruction/asynchronous-state-updates-and-batching/asynchronous-state-updates-and-batching.md"
        },
        {
          "title": "Project: Implementing an Update Queue",
          "description": "Improve performance by batching multiple state updates into a single re-render.",
          "path": "instruction/project-implementing-an-update-queue/project-implementing-an-update-queue.md"
        },
        {
          "title": "Module 3 Review",
          "description": "Recap of the reactivity system, state, and effect hooks.",
          "path": "instruction/module-3-review/module-3-review.md"
        }
      ]
    },
    {
      "title": "Module 4: Advanced Features - Routing & Styling",
      "description": "Expand your framework to support Single-Page Applications (SPAs) by building a client-side router and explore different strategies for styling components.",
      "topics": [
        {
          "title": "Single-Page Application (SPA) Architecture",
          "description": "Understanding the benefits and challenges of SPAs.",
          "path": "instruction/single-page-application-spa-architecture/single-page-application-spa-architecture.md"
        },
        {
          "title": "The Browser History API",
          "description": "Using `pushState`, `replaceState`, and the `popstate` event to control navigation.",
          "path": "instruction/the-browser-history-api/the-browser-history-api.md"
        },
        {
          "title": "Designing Router Components",
          "description": "Planning the API for `<Router>`, `<Route>`, and `<Link>` components.",
          "path": "instruction/designing-router-components/designing-router-components.md"
        },
        {
          "title": "Project: Scaffolding the Router",
          "description": "Create the basic components for the routing system.",
          "path": "instruction/project-scaffolding-the-router/project-scaffolding-the-router.md"
        },
        {
          "title": "Project: Implementing the `Link` Component",
          "description": "Build a component for declarative navigation that prevents full page reloads.",
          "path": "instruction/project-implementing-the-link-component/project-implementing-the-link-component.md"
        },
        {
          "title": "Project: Implementing the `Route` Component",
          "description": "Build a component that conditionally renders its children based on the current URL.",
          "path": "instruction/project-implementing-the-route-component/project-implementing-the-route-component.md"
        },
        {
          "title": "Handling Dynamic Route Segments",
          "description": "Matching routes with parameters like `/users/:id`.",
          "path": "instruction/handling-dynamic-route-segments/handling-dynamic-route-segments.md"
        },
        {
          "title": "Project: Extracting Route Parameters",
          "description": "Upgrade the router to parse and provide route parameters to components.",
          "path": "instruction/project-extracting-route-parameters/project-extracting-route-parameters.md"
        },
        {
          "title": "Handling 'Not Found' 404 Pages",
          "description": "Implementing a catch-all route for invalid URLs.",
          "path": "instruction/handling-not-found-404-pages/handling-not-found-404-pages.md"
        },
        {
          "title": "The Problem with Global CSS",
          "description": "Name collisions, specificity wars, and the challenges of CSS in component-based architectures.",
          "path": "instruction/the-problem-with-global-css/the-problem-with-global-css.md"
        },
        {
          "title": "Styling Strategy: CSS-in-JS",
          "description": "An overview of writing CSS directly within your JavaScript components.",
          "path": "instruction/styling-strategy-css-in-js/styling-strategy-css-in-js.md"
        },
        {
          "title": "Project: A Basic CSS-in-JS Implementation",
          "description": "Create a helper function that generates unique class names and injects styles into the document head.",
          "path": "instruction/project-a-basic-css-in-js-implementation/project-a-basic-css-in-js-implementation.md"
        },
        {
          "title": "Styling Strategy: Scoped Styles",
          "description": "An alternative approach that automatically scopes styles to a component.",
          "path": "instruction/styling-strategy-scoped-styles/styling-strategy-scoped-styles.md"
        },
        {
          "title": "Conditional Rendering Patterns",
          "description": "Best practices for showing or hiding components using ternaries and logical AND.",
          "path": "instruction/conditional-rendering-patterns/conditional-rendering-patterns.md"
        },
        {
          "title": "Project: Integrating Routing and Styling",
          "description": "Build a small multi-page sample app with your framework to test the new features.",
          "path": "instruction/project-integrating-routing-and-styling/project-integrating-routing-and-styling.md"
        },
        {
          "title": "Module 4 Review",
          "description": "Review of the completed client-side router and styling solutions.",
          "path": "instruction/module-4-review/module-4-review.md"
        }
      ]
    },
    {
      "title": "Module 5: Context, Optimization, and Comparison",
      "description": "Address complex state management with a Context API. Optimize your framework for performance. Finally, compare your implementation choices to React, Vue, and Svelte.",
      "topics": [
        {
          "title": "The Problem of Prop Drilling",
          "description": "The difficulty of passing state through many layers of components.",
          "path": "instruction/the-problem-of-prop-drilling/the-problem-of-prop-drilling.md"
        },
        {
          "title": "The Context API Pattern",
          "description": "A pattern for making state globally available to a tree of components.",
          "path": "instruction/the-context-api-pattern/the-context-api-pattern.md"
        },
        {
          "title": "Project: Implementing `createContext` and a `Provider`",
          "description": "Build the core function for creating a context and the component to provide its value.",
          "path": "instruction/project-implementing-createcontext-and-a-provider/project-implementing-createcontext-and-a-provider.md"
        },
        {
          "title": "Project: Implementing a `useContext` Hook",
          "description": "Create a hook that allows any component to subscribe to context changes.",
          "path": "instruction/project-implementing-a-usecontext-hook/project-implementing-a-usecontext-hook.md"
        },
        {
          "title": "Managing Complex State with Reducers",
          "description": "An alternative to `useState` for more complex state logic, inspired by Redux.",
          "path": "instruction/managing-complex-state-with-reducers/managing-complex-state-with-reducers.md"
        },
        {
          "title": "Project: Implementing a `useReducer` Hook",
          "description": "Build a hook for managing state via a reducer function.",
          "path": "instruction/project-implementing-a-usereducer-hook/project-implementing-a-usereducer-hook.md"
        },
        {
          "title": "Performance Optimization: Memoization",
          "description": "Avoiding expensive recalculations on every render.",
          "path": "instruction/performance-optimization-memoization/performance-optimization-memoization.md"
        },
        {
          "title": "Project: Implementing a `useMemo` Hook",
          "description": "Build a hook to memoize the result of a function.",
          "path": "instruction/project-implementing-a-usememo-hook/project-implementing-a-usememo-hook.md"
        },
        {
          "title": "Performance Optimization: Referential Equality",
          "description": "The problem of re-creating functions on every render.",
          "path": "instruction/performance-optimization-referential-equality/performance-optimization-referential-equality.md"
        },
        {
          "title": "Project: Implementing a `useCallback` Hook",
          "description": "Build a hook to memoize functions themselves.",
          "path": "instruction/project-implementing-a-usecallback-hook/project-implementing-a-usecallback-hook.md"
        },
        {
          "title": "Comparative Study: React's Fiber Architecture",
          "description": "How React's scheduler enables concurrent rendering, a concept beyond our VDOM.",
          "path": "instruction/comparative-study-reacts-fiber-architecture/comparative-study-reacts-fiber-architecture.md"
        },
        {
          "title": "Comparative Study: Vue's Reactivity System",
          "description": "Comparing your Proxy-based system to Vue's `ref` and `reactive` APIs.",
          "path": "instruction/comparative-study-vues-reactivity-system/comparative-study-vues-reactivity-system.md"
        },
        {
          "title": "Comparative Study: Svelte's Compile-Time Magic",
          "description": "Understanding how Svelte avoids a VDOM and shipping a large runtime by compiling components.",
          "path": "instruction/comparative-study-sveltes-compile-time-magic/comparative-study-sveltes-compile-time-magic.md"
        },
        {
          "title": "Developer Experience: Error Handling",
          "description": "The importance of clear, actionable error messages for framework users.",
          "path": "instruction/developer-experience-error-handling/developer-experience-error-handling.md"
        },
        {
          "title": "Project: Adding Developer-Friendly Error Messages",
          "description": "Improve your framework by adding `try...catch` blocks and better error reporting.",
          "path": "instruction/project-adding-developer-friendly-error-messages/project-adding-developer-friendly-error-messages.md"
        },
        {
          "title": "Module 5 Review",
          "description": "Final review of your complete framework and its place among the major players.",
          "path": "instruction/module-5-review/module-5-review.md"
        }
      ]
    },
    {
      "title": "Module 6: Capstone Application and Deployment",
      "description": "Put your framework to the ultimate test. Build a complete, data-driven web application from scratch and prepare it for production.",
      "topics": [
        {
          "title": "Capstone: Project Kick-off and Planning",
          "description": "Choose a project (e.g., blog, e-commerce, social media clone) and design its architecture.",
          "path": "instruction/capstone-project-kick-off-and-planning/capstone-project-kick-off-and-planning.md"
        },
        {
          "title": "Bundlers and the Build Process",
          "description": "Introduction to tools like Vite and Webpack for preparing code for production.",
          "path": "instruction/bundlers-and-the-build-process/bundlers-and-the-build-process.md"
        },
        {
          "title": "Project: Creating a Production Build for Your Framework",
          "description": "Set up a build process to bundle and minify your framework's code.",
          "path": "instruction/project-creating-a-production-build-for-your-framework/project-creating-a-production-build-for-your-framework.md"
        },
        {
          "title": "Capstone: Project Setup and Scaffolding",
          "description": "Initialize a new project using your custom framework and build tool.",
          "path": "instruction/capstone-project-setup-and-scaffolding/capstone-project-setup-and-scaffolding.md"
        },
        {
          "title": "Capstone: Building a Reusable Component Library",
          "description": "Create a set of common UI components (Button, Input, Card, Modal) for your app.",
          "path": "instruction/capstone-building-a-reusable-component-library/capstone-building-a-reusable-component-library.md"
        },
        {
          "title": "Capstone: Implementing Layouts and Pages",
          "description": "Use your router to create the main page structure of the application.",
          "path": "instruction/capstone-implementing-layouts-and-pages/capstone-implementing-layouts-and-pages.md"
        },
        {
          "title": "Capstone: Managing Global App State with Context",
          "description": "Use your `useContext` hook for themes, user authentication, etc.",
          "path": "instruction/capstone-managing-global-app-state-with-context/capstone-managing-global-app-state-with-context.md"
        },
        {
          "title": "Capstone: Fetching and Displaying API Data",
          "description": "Use the `useEffect` hook to load and display data from an external API.",
          "path": "instruction/capstone-fetching-and-displaying-api-data/capstone-fetching-and-displaying-api-data.md"
        },
        {
          "title": "Capstone: Handling Forms and User Input",
          "description": "Build and manage complex forms using your `useState` hook.",
          "path": "instruction/capstone-handling-forms-and-user-input/capstone-handling-forms-and-user-input.md"
        },
        {
          "title": "Capstone: Implementing Authentication",
          "description": "Create login/logout functionality and protected routes.",
          "path": "instruction/capstone-implementing-authentication/capstone-implementing-authentication.md"
        },
        {
          "title": "Advanced Concept: Code Splitting and Lazy Loading",
          "description": "A theoretical look at splitting your app into smaller chunks for faster initial loads.",
          "path": "instruction/advanced-concept-code-splitting-and-lazy-loading/advanced-concept-code-splitting-and-lazy-loading.md"
        },
        {
          "title": "Advanced Concept: Server-Side Rendering (SSR)",
          "description": "An introduction to the benefits and challenges of rendering your components on the server.",
          "path": "instruction/advanced-concept-server-side-rendering-ssr/advanced-concept-server-side-rendering-ssr.md"
        },
        {
          "title": "Capstone: Testing Your Application",
          "description": "An overview of strategies for testing components and business logic in your app.",
          "path": "instruction/capstone-testing-your-application/capstone-testing-your-application.md"
        },
        {
          "title": "Capstone: Final Polish and Optimization",
          "description": "Use your `useMemo` and `useCallback` hooks to optimize performance-critical components.",
          "path": "instruction/capstone-final-polish-and-optimization/capstone-final-polish-and-optimization.md"
        },
        {
          "title": "Capstone: Deployment",
          "description": "Deploying your final application to a static hosting provider like Vercel or Netlify.",
          "path": "instruction/capstone-deployment/capstone-deployment.md"
        },
        {
          "title": "Course Wrap-up and Future Directions",
          "description": "Congratulations! A review of what you've built and where to go from here.",
          "path": "instruction/course-wrap-up-and-future-directions/course-wrap-up-and-future-directions.md"
        }
      ]
    }
  ]
}